{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0dc21e48-60bd-4856-b0ed-247ad6649768",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import datetime as dt\n",
    "\n",
    "from scipy import stats\n",
    "from tempfile import mkdtemp\n",
    "from shutil import rmtree\n",
    "\n",
    "from xgboost import XGBRegressor\n",
    "\n",
    "from sklearn import set_config\n",
    "set_config(display = 'diagram')\n",
    "\n",
    "# Sklearn preprocessing\n",
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "from sklearn.compose import make_column_transformer, make_column_selector\n",
    "from sklearn.ensemble import AdaBoostRegressor, VotingRegressor, GradientBoostingRegressor, StackingRegressor, RandomForestRegressor\n",
    "from sklearn.feature_selection import SelectPercentile, mutual_info_regression, VarianceThreshold, SelectFromModel\n",
    "from sklearn.impute import SimpleImputer, KNNImputer\n",
    "from sklearn.linear_model import Ridge, LinearRegression\n",
    "from sklearn.metrics import make_scorer, mean_squared_error, mean_squared_log_error\n",
    "from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, RandomizedSearchCV\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.pipeline import make_pipeline\n",
    "from sklearn.preprocessing import MinMaxScaler, OneHotEncoder, OrdinalEncoder\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.tree import DecisionTreeRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1f5d743e-55ce-4ce1-8e13-96ac6f33f3ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "users_df = pd.read_csv('raw_data/users.csv')\n",
    "centers_df = pd.read_csv('raw_data/distribution_centers.csv')\n",
    "events_df = pd.read_csv('raw_data/events.csv')\n",
    "inventory_items_df = pd.read_csv('raw_data/inventory_items.csv')\n",
    "order_items_df = pd.read_csv('raw_data/order_items.csv')\n",
    "orders_df = pd.read_csv('raw_data/orders.csv')\n",
    "products_df = pd.read_csv('raw_data/products.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "58af306e-0ca2-4df1-af82-711d3ab6c4bd",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>user_id</th>\n",
       "      <th>status</th>\n",
       "      <th>gender</th>\n",
       "      <th>created_at</th>\n",
       "      <th>returned_at</th>\n",
       "      <th>shipped_at</th>\n",
       "      <th>delivered_at</th>\n",
       "      <th>num_of_item</th>\n",
       "      <th>sale_price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>Cancelled</td>\n",
       "      <td>F</td>\n",
       "      <td>2022-10-20 10:03:00+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>65.650000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>60</td>\n",
       "      <td>44</td>\n",
       "      <td>Cancelled</td>\n",
       "      <td>F</td>\n",
       "      <td>2023-01-20 02:12:00+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>16.990000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>64</td>\n",
       "      <td>46</td>\n",
       "      <td>Cancelled</td>\n",
       "      <td>F</td>\n",
       "      <td>2021-12-06 09:11:00+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>36.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>89</td>\n",
       "      <td>65</td>\n",
       "      <td>Cancelled</td>\n",
       "      <td>F</td>\n",
       "      <td>2020-08-13 09:58:00+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>49.990002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>102</td>\n",
       "      <td>76</td>\n",
       "      <td>Cancelled</td>\n",
       "      <td>F</td>\n",
       "      <td>2023-01-17 08:17:00+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "      <td>43.190001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   order_id  user_id     status gender                 created_at returned_at  \\\n",
       "0         8        5  Cancelled      F  2022-10-20 10:03:00+00:00         NaN   \n",
       "1        60       44  Cancelled      F  2023-01-20 02:12:00+00:00         NaN   \n",
       "2        64       46  Cancelled      F  2021-12-06 09:11:00+00:00         NaN   \n",
       "3        89       65  Cancelled      F  2020-08-13 09:58:00+00:00         NaN   \n",
       "4       102       76  Cancelled      F  2023-01-17 08:17:00+00:00         NaN   \n",
       "\n",
       "  shipped_at delivered_at  num_of_item  sale_price  \n",
       "0        NaN          NaN            3   65.650000  \n",
       "1        NaN          NaN            1   16.990000  \n",
       "2        NaN          NaN            1   36.000000  \n",
       "3        NaN          NaN            1   49.990002  \n",
       "4        NaN          NaN            2   43.190001  "
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sales_per_order = order_items_df[['order_id','sale_price']].groupby(by='order_id').sum('sale_price')\n",
    "\n",
    "orders_w_sales = orders_df.merge(sales_per_order,on='order_id')\n",
    "\n",
    "orders_w_sales.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "b9ecd343-4ef8-4a20-b4a6-2d367eca220e",
   "metadata": {},
   "outputs": [],
   "source": [
    "orders_w_sales['created_at'] = pd.to_datetime(orders_w_sales['created_at'],format='mixed').dt.tz_localize(None)\n",
    "orders_w_sales['returned_at'] = pd.to_datetime(orders_w_sales['returned_at'],format='mixed').dt.tz_localize(None)\n",
    "orders_w_sales['shipped_at'] = pd.to_datetime(orders_w_sales['shipped_at'],format='mixed').dt.tz_localize(None)\n",
    "orders_w_sales['delivered_at'] = pd.to_datetime(orders_w_sales['delivered_at'],format='mixed').dt.tz_localize(None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "27f0bed5-77cd-45e9-8bf8-4344b6d16210",
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_cleaning(order_items_df, orders_df):\n",
    "    '''\n",
    "    This function takes the order_items and the orders tables, aggregates the order_items table,\n",
    "    merges the tables, cleans the datatypes and returns the cleaned dataframe\n",
    "    '''\n",
    "\n",
    "    # Agreegate the sale_price by order_id and merge the orders table\n",
    "    order_sales = order_items_df[['order_id','sale_price']].groupby(by='order_id').sum('sale_price').reset_index()\n",
    "\n",
    "    cleaned_order_sales = orders_df.merge(order_sales, on='order_id', how='left')\n",
    "\n",
    "    # Convert the created_at column from 'object' to datetime64\n",
    "    cleaned_order_sales['created_at'] = pd.to_datetime(cleaned_order_sales['created_at'],\n",
    "                                                       format='mixed').dt.tz_localize(None)\n",
    "    cleaned_order_sales['returned_at'] = pd.to_datetime(cleaned_order_sales['returned_at'],\n",
    "                                                       format='mixed').dt.tz_localize(None)\n",
    "    cleaned_order_sales['shipped_at'] = pd.to_datetime(cleaned_order_sales['shipped_at'],\n",
    "                                                       format='mixed').dt.tz_localize(None)\n",
    "    cleaned_order_sales['delivered_at'] = pd.to_datetime(cleaned_order_sales['delivered_at'],\n",
    "                                                       format='mixed').dt.tz_localize(None)\n",
    "\n",
    "\n",
    "    return cleaned_order_sales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2bc98838-3b77-4345-bf88-d96e056194e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>order_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>44</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>46</td>\n",
       "      <td>64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>65</td>\n",
       "      <td>89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>76</td>\n",
       "      <td>102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125221</th>\n",
       "      <td>99972</td>\n",
       "      <td>125196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125222</th>\n",
       "      <td>99975</td>\n",
       "      <td>125199</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125223</th>\n",
       "      <td>99983</td>\n",
       "      <td>125208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125224</th>\n",
       "      <td>99983</td>\n",
       "      <td>125210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125225</th>\n",
       "      <td>99999</td>\n",
       "      <td>125224</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>125226 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        user_id  order_id\n",
       "0             5         8\n",
       "1            44        60\n",
       "2            46        64\n",
       "3            65        89\n",
       "4            76       102\n",
       "...         ...       ...\n",
       "125221    99972    125196\n",
       "125222    99975    125199\n",
       "125223    99983    125208\n",
       "125224    99983    125210\n",
       "125225    99999    125224\n",
       "\n",
       "[125226 rows x 2 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_cleaning(order_items_df, orders_df)[['user_id','order_id']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5100fd67-a9ae-48ae-8e99-e53f63919367",
   "metadata": {},
   "outputs": [],
   "source": [
    "def order_features(split_date, orders_df, order_items_df, products_df):\n",
    "    '''\n",
    "    Calculates features required for XBG\n",
    "    inputs order_df, order_items_df, products_df\n",
    "    Assumes revenue per order is already calculated in sale_price column,\n",
    "    all the datetime fields and split_date should be in datetime format\n",
    "    '''\n",
    "\n",
    "    orders_df = data_cleaning(order_items_df, orders_df)\n",
    "\n",
    "    # Days calculation\n",
    "    orders_df['days_to_split_date'] = (split_date - orders_df['created_at']).dt.days\n",
    "    orders_df['days_delivery'] = (orders_df['delivered_at'] - orders_df['created_at']).dt.days\n",
    "\n",
    "    # Filter data only for last 2 years\n",
    "    orders_df = orders_df[(orders_df.days_to_split_date >= 0) & (orders_df.days_to_split_date < 365*2)]\n",
    "\n",
    "    # Base dataset : user level\n",
    "    base = orders_df[['user_id','order_id']].groupby('user_id').count().rename(columns={'order_id': 'orders_total'})\n",
    "\n",
    "    # Calculate first purchase, latest purchase\n",
    "    first_purchase = orders_df[['user_id','created_at']].groupby('user_id').min().rename(columns={'created_at': 'min_created_at'})\n",
    "    base = base.merge(first_purchase, on='user_id')\n",
    "    latest_purchase = orders_df[['user_id','created_at']].groupby('user_id').max().rename(columns={'created_at': 'max_created_at'})\n",
    "    base = base.merge(latest_purchase, on='user_id')\n",
    "\n",
    "\n",
    "    # Days from first/last order (Recency, customer T)\n",
    "    base['days_from_first_order'] =  (split_date - base['min_created_at']).dt.days\n",
    "    base['days_from_last_order'] =  (split_date - base['max_created_at']).dt.days\n",
    "\n",
    "\n",
    "    # Frequency, Monetary\n",
    "    df_30 = orders_df[orders_df.days_to_split_date < 30]\n",
    "    df_60 = orders_df[(orders_df.days_to_split_date >= 30) & (orders_df.days_to_split_date < 60)]\n",
    "    df_120 = orders_df[(orders_df.days_to_split_date >= 60) & (orders_df.days_to_split_date < 120)]\n",
    "    df_240 = orders_df[(orders_df.days_to_split_date >= 120) & (orders_df.days_to_split_date < 240)]\n",
    "    df_480 = orders_df[(orders_df.days_to_split_date >= 240) & (orders_df.days_to_split_date < 480)]\n",
    "\n",
    "    # orders per different timeframe\n",
    "    f_30 = df_30[['user_id','order_id']].groupby(by='user_id').count().rename(columns={'order_id': 'orders_30d'})\n",
    "    f_60 = df_60[['user_id','order_id']].groupby(by='user_id').count().rename(columns={'order_id': 'orders_60d'})\n",
    "    f_120 = df_120[['user_id','order_id']].groupby(by='user_id').count().rename(columns={'order_id': 'orders_120d'})\n",
    "    f_240 = df_240[['user_id','order_id']].groupby(by='user_id').count().rename(columns={'order_id': 'orders_240d'})\n",
    "    f_480 = df_480[['user_id','order_id']].groupby(by='user_id').count().rename(columns={'order_id': 'orders_480d'})\n",
    "\n",
    "    # Frequency Joined to base dataset\n",
    "    base = base.merge(f_30,on='user_id',how='left')\n",
    "    base = base.merge(f_60,on='user_id',how='left')\n",
    "    base = base.merge(f_120,on='user_id',how='left')\n",
    "    base = base.merge(f_240,on='user_id',how='left')\n",
    "    base = base.merge(f_480,on='user_id',how='left')\n",
    "\n",
    "    # orders per different timeframe\n",
    "    m_30 = df_30[['user_id','sale_price']].groupby(by='user_id').sum().rename(columns={'sale_price': 'revenue_30d'})\n",
    "    m_60 = df_60[['user_id','sale_price']].groupby(by='user_id').sum().rename(columns={'sale_price': 'revenue_60d'})\n",
    "    m_120 = df_120[['user_id','sale_price']].groupby(by='user_id').sum().rename(columns={'sale_price': 'revenue_120d'})\n",
    "    m_240 = df_240[['user_id','sale_price']].groupby(by='user_id').sum().rename(columns={'sale_price': 'revenue_240d'})\n",
    "    m_480 = df_480[['user_id','sale_price']].groupby(by='user_id').sum().rename(columns={'sale_price': 'revenue_480d'})\n",
    "    m_total = orders_df[['user_id','sale_price']].groupby(by='user_id').sum().rename(columns={'sale_price': 'revenue_total'})\n",
    "\n",
    "    # Monetary Joined to base dataset\n",
    "    base = base.merge(m_30,on='user_id',how='left')\n",
    "    base = base.merge(m_60,on='user_id',how='left')\n",
    "    base = base.merge(m_120,on='user_id',how='left')\n",
    "    base = base.merge(m_240,on='user_id',how='left')\n",
    "    base = base.merge(m_480,on='user_id',how='left')\n",
    "    base = base.merge(m_total,on='user_id',how='left')\n",
    "\n",
    "    # ABV calculation\n",
    "    base['abv'] = base['revenue_total']/base['orders_total']\n",
    "\n",
    "    # Other calcs (delivery, num_items)\n",
    "    avg_delivery_days = orders_df[['user_id','days_delivery']].groupby('user_id').mean().rename(columns={'days_delivery': 'avg_delivery_days'})\n",
    "    base = base.merge(avg_delivery_days, on='user_id')\n",
    "    avg_items_p_order = orders_df[['user_id','num_of_item']].groupby('user_id').mean().rename(columns={'num_of_item': 'avg_num_items'})\n",
    "    base = base.merge(avg_items_p_order, on='user_id')\n",
    "\n",
    "    return base"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ae761606-c2b0-4ae7-ae76-7946edd372bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>orders_total</th>\n",
       "      <th>min_created_at</th>\n",
       "      <th>max_created_at</th>\n",
       "      <th>days_from_first_order</th>\n",
       "      <th>days_from_last_order</th>\n",
       "      <th>orders_30d</th>\n",
       "      <th>orders_60d</th>\n",
       "      <th>orders_120d</th>\n",
       "      <th>orders_240d</th>\n",
       "      <th>orders_480d</th>\n",
       "      <th>revenue_30d</th>\n",
       "      <th>revenue_60d</th>\n",
       "      <th>revenue_120d</th>\n",
       "      <th>revenue_240d</th>\n",
       "      <th>revenue_480d</th>\n",
       "      <th>revenue_total</th>\n",
       "      <th>abv</th>\n",
       "      <th>avg_delivery_days</th>\n",
       "      <th>avg_num_items</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-06-15 12:17:00</td>\n",
       "      <td>2019-06-15 12:17:00</td>\n",
       "      <td>199</td>\n",
       "      <td>199</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>173.959999</td>\n",
       "      <td>NaN</td>\n",
       "      <td>173.959999</td>\n",
       "      <td>173.959999</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-09-04 14:50:00</td>\n",
       "      <td>2019-09-04 14:50:00</td>\n",
       "      <td>118</td>\n",
       "      <td>118</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23.950001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23.950001</td>\n",
       "      <td>23.950001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>158</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-04-16 11:12:00</td>\n",
       "      <td>2019-04-16 11:12:00</td>\n",
       "      <td>259</td>\n",
       "      <td>259</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>66.989998</td>\n",
       "      <td>66.989998</td>\n",
       "      <td>66.989998</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-12-20 04:20:00</td>\n",
       "      <td>2019-12-20 04:20:00</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>59.990002</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>59.990002</td>\n",
       "      <td>59.990002</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>273</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-12-10 11:53:00</td>\n",
       "      <td>2019-12-10 11:53:00</td>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.360001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.360001</td>\n",
       "      <td>38.360001</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>277</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-10-19 01:28:00</td>\n",
       "      <td>2019-10-19 01:28:00</td>\n",
       "      <td>73</td>\n",
       "      <td>73</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>15.440000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>15.440000</td>\n",
       "      <td>15.440000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>351</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-09-23 18:58:00</td>\n",
       "      <td>2019-09-23 18:58:00</td>\n",
       "      <td>99</td>\n",
       "      <td>99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>135.950000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>135.950000</td>\n",
       "      <td>135.950000</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>353</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-09-17 09:10:00</td>\n",
       "      <td>2019-09-17 09:10:00</td>\n",
       "      <td>105</td>\n",
       "      <td>105</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42.000000</td>\n",
       "      <td>42.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>422</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-03-04 11:18:00</td>\n",
       "      <td>2019-03-04 11:18:00</td>\n",
       "      <td>302</td>\n",
       "      <td>302</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>447</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-06-13 10:24:00</td>\n",
       "      <td>2019-06-13 10:24:00</td>\n",
       "      <td>201</td>\n",
       "      <td>201</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>462</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-11-13 08:33:00</td>\n",
       "      <td>2019-11-13 08:33:00</td>\n",
       "      <td>48</td>\n",
       "      <td>48</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42.750000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>42.750000</td>\n",
       "      <td>42.750000</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>584</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-03-15 10:03:00</td>\n",
       "      <td>2019-03-15 10:03:00</td>\n",
       "      <td>291</td>\n",
       "      <td>291</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>117.599998</td>\n",
       "      <td>117.599998</td>\n",
       "      <td>117.599998</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>612</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-03-24 05:04:00</td>\n",
       "      <td>2019-03-24 05:04:00</td>\n",
       "      <td>282</td>\n",
       "      <td>282</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>48.950001</td>\n",
       "      <td>48.950001</td>\n",
       "      <td>48.950001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>640</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-12-16 10:15:00</td>\n",
       "      <td>2019-12-16 10:15:00</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>103.129997</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>103.129997</td>\n",
       "      <td>103.129997</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>674</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-07-15 13:32:00</td>\n",
       "      <td>2019-07-15 13:32:00</td>\n",
       "      <td>169</td>\n",
       "      <td>169</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>29.990000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>29.990000</td>\n",
       "      <td>29.990000</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>688</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-10-16 14:52:00</td>\n",
       "      <td>2019-10-16 14:52:00</td>\n",
       "      <td>76</td>\n",
       "      <td>76</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.500000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.500000</td>\n",
       "      <td>38.500000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>689</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-11-24 00:26:00</td>\n",
       "      <td>2019-11-24 00:26:00</td>\n",
       "      <td>37</td>\n",
       "      <td>37</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>147.130005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>147.130005</td>\n",
       "      <td>147.130005</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>728</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-05-15 02:27:00</td>\n",
       "      <td>2019-05-15 02:27:00</td>\n",
       "      <td>230</td>\n",
       "      <td>230</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>63.500000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>63.500000</td>\n",
       "      <td>63.500000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>729</th>\n",
       "      <td>1</td>\n",
       "      <td>2019-04-09 05:38:00</td>\n",
       "      <td>2019-04-09 05:38:00</td>\n",
       "      <td>266</td>\n",
       "      <td>266</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>46.220001</td>\n",
       "      <td>46.220001</td>\n",
       "      <td>46.220001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>866</th>\n",
       "      <td>2</td>\n",
       "      <td>2019-08-12 13:27:00</td>\n",
       "      <td>2019-10-02 13:27:00</td>\n",
       "      <td>141</td>\n",
       "      <td>90</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>52.130001</td>\n",
       "      <td>101.970001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>154.100002</td>\n",
       "      <td>77.050001</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         orders_total      min_created_at      max_created_at  \\\n",
       "user_id                                                         \n",
       "17                  1 2019-06-15 12:17:00 2019-06-15 12:17:00   \n",
       "115                 1 2019-09-04 14:50:00 2019-09-04 14:50:00   \n",
       "158                 1 2019-04-16 11:12:00 2019-04-16 11:12:00   \n",
       "178                 1 2019-12-20 04:20:00 2019-12-20 04:20:00   \n",
       "273                 1 2019-12-10 11:53:00 2019-12-10 11:53:00   \n",
       "277                 1 2019-10-19 01:28:00 2019-10-19 01:28:00   \n",
       "351                 1 2019-09-23 18:58:00 2019-09-23 18:58:00   \n",
       "353                 1 2019-09-17 09:10:00 2019-09-17 09:10:00   \n",
       "422                 1 2019-03-04 11:18:00 2019-03-04 11:18:00   \n",
       "447                 1 2019-06-13 10:24:00 2019-06-13 10:24:00   \n",
       "462                 1 2019-11-13 08:33:00 2019-11-13 08:33:00   \n",
       "584                 1 2019-03-15 10:03:00 2019-03-15 10:03:00   \n",
       "612                 1 2019-03-24 05:04:00 2019-03-24 05:04:00   \n",
       "640                 1 2019-12-16 10:15:00 2019-12-16 10:15:00   \n",
       "674                 1 2019-07-15 13:32:00 2019-07-15 13:32:00   \n",
       "688                 1 2019-10-16 14:52:00 2019-10-16 14:52:00   \n",
       "689                 1 2019-11-24 00:26:00 2019-11-24 00:26:00   \n",
       "728                 1 2019-05-15 02:27:00 2019-05-15 02:27:00   \n",
       "729                 1 2019-04-09 05:38:00 2019-04-09 05:38:00   \n",
       "866                 2 2019-08-12 13:27:00 2019-10-02 13:27:00   \n",
       "\n",
       "         days_from_first_order  days_from_last_order  orders_30d  orders_60d  \\\n",
       "user_id                                                                        \n",
       "17                         199                   199         NaN         NaN   \n",
       "115                        118                   118         NaN         NaN   \n",
       "158                        259                   259         NaN         NaN   \n",
       "178                         11                    11         1.0         NaN   \n",
       "273                         21                    21         1.0         NaN   \n",
       "277                         73                    73         NaN         NaN   \n",
       "351                         99                    99         NaN         NaN   \n",
       "353                        105                   105         NaN         NaN   \n",
       "422                        302                   302         NaN         NaN   \n",
       "447                        201                   201         NaN         NaN   \n",
       "462                         48                    48         NaN         1.0   \n",
       "584                        291                   291         NaN         NaN   \n",
       "612                        282                   282         NaN         NaN   \n",
       "640                         15                    15         1.0         NaN   \n",
       "674                        169                   169         NaN         NaN   \n",
       "688                         76                    76         NaN         NaN   \n",
       "689                         37                    37         NaN         1.0   \n",
       "728                        230                   230         NaN         NaN   \n",
       "729                        266                   266         NaN         NaN   \n",
       "866                        141                    90         NaN         NaN   \n",
       "\n",
       "         orders_120d  orders_240d  orders_480d  revenue_30d  revenue_60d  \\\n",
       "user_id                                                                    \n",
       "17               NaN          1.0          NaN          NaN          NaN   \n",
       "115              1.0          NaN          NaN          NaN          NaN   \n",
       "158              NaN          NaN          1.0          NaN          NaN   \n",
       "178              NaN          NaN          NaN    59.990002          NaN   \n",
       "273              NaN          NaN          NaN    38.360001          NaN   \n",
       "277              1.0          NaN          NaN          NaN          NaN   \n",
       "351              1.0          NaN          NaN          NaN          NaN   \n",
       "353              1.0          NaN          NaN          NaN          NaN   \n",
       "422              NaN          NaN          1.0          NaN          NaN   \n",
       "447              NaN          1.0          NaN          NaN          NaN   \n",
       "462              NaN          NaN          NaN          NaN    42.750000   \n",
       "584              NaN          NaN          1.0          NaN          NaN   \n",
       "612              NaN          NaN          1.0          NaN          NaN   \n",
       "640              NaN          NaN          NaN   103.129997          NaN   \n",
       "674              NaN          1.0          NaN          NaN          NaN   \n",
       "688              1.0          NaN          NaN          NaN          NaN   \n",
       "689              NaN          NaN          NaN          NaN   147.130005   \n",
       "728              NaN          1.0          NaN          NaN          NaN   \n",
       "729              NaN          NaN          1.0          NaN          NaN   \n",
       "866              1.0          1.0          NaN          NaN          NaN   \n",
       "\n",
       "         revenue_120d  revenue_240d  revenue_480d  revenue_total         abv  \\\n",
       "user_id                                                                        \n",
       "17                NaN    173.959999           NaN     173.959999  173.959999   \n",
       "115         23.950001           NaN           NaN      23.950001   23.950001   \n",
       "158               NaN           NaN     66.989998      66.989998   66.989998   \n",
       "178               NaN           NaN           NaN      59.990002   59.990002   \n",
       "273               NaN           NaN           NaN      38.360001   38.360001   \n",
       "277         15.440000           NaN           NaN      15.440000   15.440000   \n",
       "351        135.950000           NaN           NaN     135.950000  135.950000   \n",
       "353         42.000000           NaN           NaN      42.000000   42.000000   \n",
       "422               NaN           NaN     50.000000      50.000000   50.000000   \n",
       "447               NaN     18.000000           NaN      18.000000   18.000000   \n",
       "462               NaN           NaN           NaN      42.750000   42.750000   \n",
       "584               NaN           NaN    117.599998     117.599998  117.599998   \n",
       "612               NaN           NaN     48.950001      48.950001   48.950001   \n",
       "640               NaN           NaN           NaN     103.129997  103.129997   \n",
       "674               NaN     29.990000           NaN      29.990000   29.990000   \n",
       "688         38.500000           NaN           NaN      38.500000   38.500000   \n",
       "689               NaN           NaN           NaN     147.130005  147.130005   \n",
       "728               NaN     63.500000           NaN      63.500000   63.500000   \n",
       "729               NaN           NaN     46.220001      46.220001   46.220001   \n",
       "866         52.130001    101.970001           NaN     154.100002   77.050001   \n",
       "\n",
       "         avg_delivery_days  avg_num_items  \n",
       "user_id                                    \n",
       "17                     1.0            2.0  \n",
       "115                    NaN            1.0  \n",
       "158                    NaN            1.0  \n",
       "178                    NaN            1.0  \n",
       "273                    5.0            1.0  \n",
       "277                    NaN            1.0  \n",
       "351                    2.0            2.0  \n",
       "353                    NaN            1.0  \n",
       "422                    NaN            2.0  \n",
       "447                    NaN            1.0  \n",
       "462                    5.0            2.0  \n",
       "584                    3.0            1.0  \n",
       "612                    NaN            2.0  \n",
       "640                    2.0            1.0  \n",
       "674                    5.0            1.0  \n",
       "688                    4.0            1.0  \n",
       "689                    NaN            1.0  \n",
       "728                    4.0            3.0  \n",
       "729                    NaN            1.0  \n",
       "866                    NaN            1.0  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp_date = dt.datetime(2020,1,1)\n",
    "result = order_features(temp_date, orders_df, order_items_df, products_df)\n",
    "result.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "44b06e50-aee4-4bd0-941b-024d172a5c14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>created_at</th>\n",
       "      <th>sold_at</th>\n",
       "      <th>cost</th>\n",
       "      <th>product_category</th>\n",
       "      <th>product_name</th>\n",
       "      <th>product_brand</th>\n",
       "      <th>product_retail_price</th>\n",
       "      <th>product_department</th>\n",
       "      <th>product_sku</th>\n",
       "      <th>product_distribution_center_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>67971</td>\n",
       "      <td>13844</td>\n",
       "      <td>2022-07-02 07:09:20+00:00</td>\n",
       "      <td>2022-07-24 06:33:20+00:00</td>\n",
       "      <td>2.76804</td>\n",
       "      <td>Accessories</td>\n",
       "      <td>(ONE) 1 Satin Headband</td>\n",
       "      <td>Funny Girl Designs</td>\n",
       "      <td>6.99</td>\n",
       "      <td>Women</td>\n",
       "      <td>2A3E953A5E3D81E67945BCE5519F84C8</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>67972</td>\n",
       "      <td>13844</td>\n",
       "      <td>2023-12-20 03:28:00+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.76804</td>\n",
       "      <td>Accessories</td>\n",
       "      <td>(ONE) 1 Satin Headband</td>\n",
       "      <td>Funny Girl Designs</td>\n",
       "      <td>6.99</td>\n",
       "      <td>Women</td>\n",
       "      <td>2A3E953A5E3D81E67945BCE5519F84C8</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>67973</td>\n",
       "      <td>13844</td>\n",
       "      <td>2023-06-04 02:53:00+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.76804</td>\n",
       "      <td>Accessories</td>\n",
       "      <td>(ONE) 1 Satin Headband</td>\n",
       "      <td>Funny Girl Designs</td>\n",
       "      <td>6.99</td>\n",
       "      <td>Women</td>\n",
       "      <td>2A3E953A5E3D81E67945BCE5519F84C8</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>72863</td>\n",
       "      <td>13844</td>\n",
       "      <td>2021-10-16 22:58:52+00:00</td>\n",
       "      <td>2021-11-22 02:19:52+00:00</td>\n",
       "      <td>2.76804</td>\n",
       "      <td>Accessories</td>\n",
       "      <td>(ONE) 1 Satin Headband</td>\n",
       "      <td>Funny Girl Designs</td>\n",
       "      <td>6.99</td>\n",
       "      <td>Women</td>\n",
       "      <td>2A3E953A5E3D81E67945BCE5519F84C8</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>72864</td>\n",
       "      <td>13844</td>\n",
       "      <td>2021-08-07 16:33:00+00:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.76804</td>\n",
       "      <td>Accessories</td>\n",
       "      <td>(ONE) 1 Satin Headband</td>\n",
       "      <td>Funny Girl Designs</td>\n",
       "      <td>6.99</td>\n",
       "      <td>Women</td>\n",
       "      <td>2A3E953A5E3D81E67945BCE5519F84C8</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id  product_id                 created_at                    sold_at  \\\n",
       "0  67971       13844  2022-07-02 07:09:20+00:00  2022-07-24 06:33:20+00:00   \n",
       "1  67972       13844  2023-12-20 03:28:00+00:00                        NaN   \n",
       "2  67973       13844  2023-06-04 02:53:00+00:00                        NaN   \n",
       "3  72863       13844  2021-10-16 22:58:52+00:00  2021-11-22 02:19:52+00:00   \n",
       "4  72864       13844  2021-08-07 16:33:00+00:00                        NaN   \n",
       "\n",
       "      cost product_category            product_name       product_brand  \\\n",
       "0  2.76804      Accessories  (ONE) 1 Satin Headband  Funny Girl Designs   \n",
       "1  2.76804      Accessories  (ONE) 1 Satin Headband  Funny Girl Designs   \n",
       "2  2.76804      Accessories  (ONE) 1 Satin Headband  Funny Girl Designs   \n",
       "3  2.76804      Accessories  (ONE) 1 Satin Headband  Funny Girl Designs   \n",
       "4  2.76804      Accessories  (ONE) 1 Satin Headband  Funny Girl Designs   \n",
       "\n",
       "   product_retail_price product_department                       product_sku  \\\n",
       "0                  6.99              Women  2A3E953A5E3D81E67945BCE5519F84C8   \n",
       "1                  6.99              Women  2A3E953A5E3D81E67945BCE5519F84C8   \n",
       "2                  6.99              Women  2A3E953A5E3D81E67945BCE5519F84C8   \n",
       "3                  6.99              Women  2A3E953A5E3D81E67945BCE5519F84C8   \n",
       "4                  6.99              Women  2A3E953A5E3D81E67945BCE5519F84C8   \n",
       "\n",
       "   product_distribution_center_id  \n",
       "0                               7  \n",
       "1                               7  \n",
       "2                               7  \n",
       "3                               7  \n",
       "4                               7  "
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# order_items_df[['order_id','product_id']]\n",
    "inventory_items_df[['id','product_category','product_brand']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "8fa02589-6d54-49d3-a039-f0825d3afb97",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>order_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>created_at</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>152013</td>\n",
       "      <td>104663</td>\n",
       "      <td>14235</td>\n",
       "      <td>2023-05-07 06:08:40+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>40993</td>\n",
       "      <td>28204</td>\n",
       "      <td>14235</td>\n",
       "      <td>2023-03-14 03:47:21+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>51224</td>\n",
       "      <td>35223</td>\n",
       "      <td>14235</td>\n",
       "      <td>2023-12-05 13:25:30+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>36717</td>\n",
       "      <td>25278</td>\n",
       "      <td>14235</td>\n",
       "      <td>2023-12-22 20:48:19+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>131061</td>\n",
       "      <td>90241</td>\n",
       "      <td>14235</td>\n",
       "      <td>2022-06-19 16:57:59+00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id  order_id  product_id                 created_at\n",
       "0  152013    104663       14235  2023-05-07 06:08:40+00:00\n",
       "1   40993     28204       14235  2023-03-14 03:47:21+00:00\n",
       "2   51224     35223       14235  2023-12-05 13:25:30+00:00\n",
       "3   36717     25278       14235  2023-12-22 20:48:19+00:00\n",
       "4  131061     90241       14235  2022-06-19 16:57:59+00:00"
      ]
     },
     "execution_count": 189,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# order_items_df.merge(products_df,left_on='product_id', right_on='id', how='left')\n",
    "\n",
    "\n",
    "test = order_items_df[['id','order_id','product_id','created_at']].copy()\n",
    "test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "d50fcc8e-b4cd-47d9-8f45-c9c3bdda63a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def product_features(order_items_df, products_df):\n",
    "    '''\n",
    "    Joins product, inventory tables per order id to join back to order table\n",
    "    '''\n",
    "    order_items_df = order_items_df[['id','order_id','product_id']].copy()\n",
    "    products_df = products_df[['id','category','brand']].copy()\n",
    "\n",
    "    df_joined = order_items_df.merge(products_df, left_on='product_id', right_on='id')\n",
    "\n",
    "    return df_joined.drop(columns=['id_x','id_y'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "76177d82-378b-4709-8d4e-996a05896b16",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>product_id</th>\n",
       "      <th>category</th>\n",
       "      <th>brand</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>104663</td>\n",
       "      <td>14235</td>\n",
       "      <td>Accessories</td>\n",
       "      <td>marshal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>28204</td>\n",
       "      <td>14235</td>\n",
       "      <td>Accessories</td>\n",
       "      <td>marshal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35223</td>\n",
       "      <td>14235</td>\n",
       "      <td>Accessories</td>\n",
       "      <td>marshal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>25278</td>\n",
       "      <td>14235</td>\n",
       "      <td>Accessories</td>\n",
       "      <td>marshal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>90241</td>\n",
       "      <td>14235</td>\n",
       "      <td>Accessories</td>\n",
       "      <td>marshal</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   order_id  product_id     category    brand\n",
       "0    104663       14235  Accessories  marshal\n",
       "1     28204       14235  Accessories  marshal\n",
       "2     35223       14235  Accessories  marshal\n",
       "3     25278       14235  Accessories  marshal\n",
       "4     90241       14235  Accessories  marshal"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "product_features(order_items_df, products_df).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "959ca375-91bb-472f-addd-f78da4bb0e4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>test</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>159.990000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>22.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>402.200001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>148.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>65.650000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99993</th>\n",
       "      <td>26.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99996</th>\n",
       "      <td>123.870001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99998</th>\n",
       "      <td>116.990000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99999</th>\n",
       "      <td>67.980000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100000</th>\n",
       "      <td>152.449997</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>80044 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               test\n",
       "user_id            \n",
       "1        159.990000\n",
       "2         22.000000\n",
       "3        402.200001\n",
       "4        148.000000\n",
       "5         65.650000\n",
       "...             ...\n",
       "99993     26.000000\n",
       "99996    123.870001\n",
       "99998    116.990000\n",
       "99999     67.980000\n",
       "100000   152.449997\n",
       "\n",
       "[80044 rows x 1 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "return_df.rename(columns={'sale_price':'revenue_total'})"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
